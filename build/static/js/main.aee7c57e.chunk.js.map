{"version":3,"sources":["components/ContactsList/ContactsListItem/ContactListItem.module.css","shared/Notification/Notification.module.css","shared/Title/Title.module.css","shared/Loader/Loader.module.css","shared/Title/Title.js","shared/Loader/Loader.js","shared/Notification/Notification.js","redux/contacts/contactsAction.js","redux/contacts/contactsOperation.js","redux/contacts/contactsSelector.js","components/Form/Form.js","components/ContactsList/ContactsListItem/ContactsListItem.js","components/ContactsList/ContactsList.js","redux/filter/filterAction.js","components/Filter/Filter.js","App.js","redux/contacts/contactsReducer.js","redux/filter/filterReducer.js","redux/store.js","index.js"],"names":["module","exports","Title","title","CSSTransition","in","appear","timeout","classNames","styles","className","InfoLoader","loader","type","color","height","width","Notification","contactExists","unmountOnExit","container","text","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","deleteContactRequest","deleteContactSuccess","deleteContactError","axios","defaults","baseURL","addContact","name","number","dispatch","post","then","data","catch","error","fetchContacts","get","deleteContact","id","delete","getContacts","state","contacts","getFilter","filter","getLoading","loading","getFilteredContacts","createSelector","contact","toLowerCase","includes","getContactById","_","contactId","find","Form","handleChange","event","target","value","setState","handleSubmit","preventDefault","props","setTimeout","this","form","onSubmit","label","onChange","placeholder","input","required","button","Component","mapDispatchToProps","contactsOperations","connect","contactsSelectors","ownProps","item","btn","onClick","searchContact","TransitionGroup","component","list","map","filterContacts","filterContact","length","App","isLoading","Loader","contactReducer","createReducer","action","payload","filterReducer","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aee7c57e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__1i3SN\",\"contact\":\"ContactListItem_contact__2ojFC\",\"btn\":\"ContactListItem_btn__2LpNi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Notification_container__uVBg0\",\"text\":\"Notification_text__3EtrH\",\"enter\":\"Notification_enter__2UR0P\",\"enterActive\":\"Notification_enterActive__1cBDf\",\"exit\":\"Notification_exit__2XUjA\",\"exitActive\":\"Notification_exitActive__3izVt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__VttSL\",\"appear\":\"Title_appear__1FKs8\",\"appearActive\":\"Title_appearActive__x2DNw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__mWRRL\"};","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport styles from './Title.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Title = ({ title }) => {\r\n  return (\r\n    <CSSTransition in={true} appear={true} timeout={500} classNames={styles}>\r\n      <h2 className={styles.title}>{title}</h2>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\nexport default Title;","import React from 'react';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport Loader from 'react-loader-spinner';\r\nimport styles from './Loader.module.css';\r\n\r\nconst InfoLoader = () => {\r\n  return (\r\n    <div className={styles.loader}>\r\n      <Loader type=\"ThreeDots\" color=\"#f1392d\" height={50} width={50} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoLoader;","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport styles from './Notification.module.css';\r\n\r\nconst Notification = ({ contactExists }) => {\r\n  return (\r\n    <CSSTransition\r\n      in={contactExists}\r\n      appear={true}\r\n      timeout={250}\r\n      classNames={styles}\r\n      unmountOnExit\r\n    >\r\n      <div className={styles.container}>\r\n        <p className={styles.text}>Contact already exists!</p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default Notification;","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContactRequest = createAction('ADD_CONTACT_REQUEST');\r\nconst addContactSuccess = createAction('ADD_CONTACT_SUCCESS');\r\nconst addContactError = createAction('ADD_CONTACT_ERROR');\r\n\r\nconst fetchContactsRequest = createAction('FETCH_CONTACTS_REQUEST');\r\nconst fetchContactsSuccess = createAction('FETCH_CONTACTS_SUCCESS');\r\nconst fetchContactsError = createAction('FETCH_CONTACTS_ERROR');\r\n\r\nconst deleteContactRequest = createAction('DELETE_CONTACT_REQUEST');\r\nconst deleteContactSuccess = createAction('DELETE_CONTACT_SUCCESS');\r\nconst deleteContactError = createAction('DELETE_CONTACT_ERROR');\r\n\r\nexport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n};","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contactsAction';\r\n\r\naxios.defaults.baseURL = 'http://localhost:2000';\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', { name, number })\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\nexport default { addContact, fetchContacts, deleteContact };","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.loading;\r\n\r\nconst getContacts = state => state.contacts;\r\n\r\nconst getFilter = state => state.filter;\r\n\r\nconst getFilteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter),\r\n    );\r\n  },\r\n);\r\n\r\nconst getContactById = createSelector(\r\n  [(_, contactId) => contactId, getContacts],\r\n  (contactId, contacts) => {\r\n    return contacts.find(contact => contact.id === contactId);\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getContacts,\r\n  getFilter,\r\n  getFilteredContacts,\r\n  getContactById,\r\n};","import React, { Component } from 'react';\r\nimport styles from './Form.css';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Notification from '../../shared/Notification'\r\nimport contactsOperations from '../../redux/contacts/contactsOperation';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelector';\r\n\r\nclass Form extends Component {\r\n  static propTypes = {\r\n    addContact: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const contact = {\r\n      name: this.state.name,\r\n      number: this.state.number,\r\n    };\r\n    if (this.props.contacts.find(({ name }) => name === contact.name)) {\r\n      this.setState({ contactExists: true });\r\n      setTimeout(() => this.setState({ contactExists: false }), 1500);\r\n      return;\r\n    }\r\n    this.props.addContact(contact);\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n  render() {\r\n    const { name, number, contactExists } = this.state;\r\n    return (\r\n      <>\r\n        <Notification contactExists={contactExists} />\r\n        <form className={styles.form} onSubmit={this.handleSubmit}>\r\n          <label className={styles.label}>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              name=\"name\"\r\n              onChange={this.handleChange}\r\n              placeholder=\"Enter your full name\"\r\n              className={styles.input}\r\n              required\r\n            />\r\n          </label>\r\n          <label className={styles.label}>\r\n            Number\r\n            <input\r\n              type=\"text\"\r\n              value={number}\r\n              name=\"number\"\r\n              onChange={this.handleChange}\r\n              placeholder=\"xxx-xx-xx\"\r\n              className={styles.input}\r\n              required\r\n            />\r\n          </label>\r\n          <input type=\"submit\" value=\"Add contact\" className={styles.button} />\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact: contactsOperations.addContact,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsSelectors from '../../../redux/contacts/contactsSelector'\r\nimport contactsOperations from '../../../redux/contacts/contactsOperation';\r\nimport styles from './ContactListItem.module.css';\r\n\r\nconst ContactsListItem = ({ name, number, deleteContact }) => {\r\n  return (\r\n    <li className={styles.item}>\r\n      <p className={styles.contact}>{name}</p>\r\n      <p className={styles.contact}>{number}</p>\r\n      <button type=\"button\" className={styles.btn} onClick={deleteContact}>\r\n        X\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const contact = contactsSelectors.getContactById(state, ownProps.id);\r\n  return { ...contact };\r\n};\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  deleteContact: () => dispatch(contactsOperations.deleteContact(ownProps.id)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsListItem);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport ContactsListItem from './ContactsListItem/ContactsListItem';\r\nimport styles from './ContactsList.css';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelector';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst ContactsList = ({ searchContact }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className={styles.list}>\r\n      {searchContact.map(({ id, name, number }) => {\r\n        return (\r\n          <CSSTransition key={id} timeout={250} classNames={styles}>\r\n            <ContactsListItem id={id}></ContactsListItem>\r\n          </CSSTransition>\r\n        );\r\n      })}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  searchContact: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { contacts, filter } = state;\r\n  const filteredContacts = contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n  return {\r\n    searchContact: filteredContacts,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(ContactsList);","import { createAction } from '@reduxjs/toolkit';\r\n// import types from '../action-types';\r\n\r\n// без redux toolkit\r\n// const filterContacts = value => ({\r\n//   type: types.FILTER_CONTACTS,\r\n//   payload: {\r\n//     value,\r\n//   },\r\n// });\r\nconst filterContacts = createAction('FILTER_CONTACTS');\r\n\r\nexport default filterContacts;","import React from 'react';\r\nimport styles from './Filter.css';\r\nimport PropTypes from 'prop-types';\r\nimport {CSSTransition } from 'react-transition-group'; \r\nimport { connect } from 'react-redux';\r\nimport filterContacts from '../../redux/filter/filterAction';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelector';\r\n\r\nconst Filter = ({ filter, filterContact, contacts }) => {\r\n  return (\r\n    <CSSTransition\r\n      in={contacts.length > 1}\r\n      appear={true}\r\n      timeout={250}\r\n      unmountOnExit\r\n      classNames={styles}\r\n    >\r\n      <div className={styles.container}>\r\n        <label className={styles.label}>\r\n          Find contacts by name\r\n          <input\r\n            className={styles.input}\r\n            onChange={event => filterContact(event.target.value)}\r\n            value={filter}\r\n          />\r\n        </label>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filterContact: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: state.filter,\r\n    contacts: state.contacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  filterContact: filterContacts,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Title from './shared/Title';\r\nimport Loader from './shared/Loader';\r\nimport Form from './components/Form';\r\nimport ContactsList from './components/ContactsList';\r\nimport Filter from './components/Filter';\r\nimport contactsOperations from './redux/contacts/contactsOperation';\r\nimport contactsSelectors from './redux/contacts/contactsSelector';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Title title=\"phonebook\" />\r\n        <Form />\r\n        {this.props.isLoading && <Loader />}\r\n        <Filter />\r\n        <ContactsList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoading: contactsSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  fetchContacts: contactsOperations.fetchContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contactsAction';\r\n\r\nconst addContact = (state, action) => {\r\n  return [...state, action.payload];\r\n};\r\n\r\nconst deleteContact = (state, action) => {\r\n  return state.filter(contact => contact.id !== action.payload);\r\n};\r\n\r\nconst contactReducer = createReducer([], {\r\n  [fetchContactsSuccess]: (state, action) => action.payload,\r\n  [addContactSuccess]: addContact,\r\n  [deleteContactSuccess]: deleteContact,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nexport { contactReducer, loading };","// import types from '../action-types';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport filterContacts from './filterAction';\r\n\r\n// без redux toolkit\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER_CONTACTS:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filterContacts]: (_, action) => action.payload,\r\n});\r\n\r\nexport default filterReducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport { contactReducer, loading } from './contacts/contactsReducer';\r\nimport filter from './filter/filterReducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n    filter,\r\n    loading,\r\n  },\r\n});\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n      <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n  );"],"sourceRoot":""}